#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 750
#define INF 1000000000

void floyd_warshall_openmp(int *dist, int n) {
    int k, i, j;
    #pragma omp parallel for shared(dist) private(k, i, j) schedule(dynamic)
    for (k = 0; k < n; k++) {
        #pragma omp parallel for shared(dist, k) private(i, j) schedule(dynamic)
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (dist[i * n + k] + dist[k * n + j] < dist[i * n + j]) {
                    dist[i * n + j] = dist[i * n + k] + dist[k * n + j];
                }
            }
        }
    }
}

void init(int *dist, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) {
                dist[i * n + j] = 0;
            } else {
                dist[i * n + j] = (rand() % 10) + 1;
                if (dist[i * n + j] > INF) {
                    dist[i * n + j] = INF;
                }
            }
        }
    }
}

int main() {
    int dist[N][N];
    init(&dist[0][0], N);

    double start_time = omp_get_wtime();
    floyd_warshall_openmp(&dist[0][0], N);
    double end_time = omp_get_wtime();
    double elapsed_time = end_time - start_time;

    printf("Elapsed time: %f seconds\n", elapsed_time);

    return 0;
}
