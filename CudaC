#include <stdio.h>
#include <stdlib.h>
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#define N 4/* Then number of nodes that changes */
#define INF 99999
__global__ void floyd_warshall(int *dist, int k) {
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < N && j < N) {
        if (dist[i * N + k] + dist[k * N + j] < dist[i * N + j])
            dist[i * N + j] = dist[i * N + k] + dist[k * N + j];
    }
}
void printDist(int *dist) {
    int i, j;
    printf("    ");
    for (i = 0; i < N; ++i)
        printf("%4c", 'A' + i);
    printf("\n");
    for (i = 0; i < N; ++i) {
        printf("%4c", 'A' + i);
        for (j = 0; j < N; ++j)
            printf("%4d", dist[i * N + j]);
        printf("\n");
    }
    printf("\n");}
int main(int argc, char *argv[]) {
    //initialize dist[][]
    int i, j;
    int *dist = (int*)malloc(N * N * sizeof(int));
    for (i = 0; i < N; ++i)
        for (j = 0; j < N; ++j)
            if (i == j)
                dist[i * N + j] = 0;
            else
                dist[i * N + j] = rand() % 10 + 1; //number creator 1-10

    printDist(dist);// printout the new array
    int *dev_dist;
    cudaMalloc(&dev_dist, N * N * sizeof(int));
    cudaMemcpy(dev_dist, dist, N * N * sizeof(int), cudaMemcpyHostToDevice);
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((N + threadsPerBlock.x - 1) / threadsPerBlock.x, (N + threadsPerBlock.y - 1) / threadsPerBlock.y);
    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    cudaEventRecord(start);
    for (int k = 0; k < N; ++k) {
        floyd_warshall<<<numBlocks, threadsPerBlock>>>(dev_dist, k);
        cudaDeviceSynchronize();
    }
    cudaEventRecord(stop);
    cudaEventSynchronize(stop);
    float elapsedTime = 0.0f;
    cudaError_t cudaEventErr = cudaEventElapsedTime(&elapsedTime, start, stop);
    if (cudaEventErr != cudaSuccess) {
        fprintf(stderr, "Failed to calculate elapsed time: %s\n", cudaGetErrorString(cudaEventErr));
        return -1;}
    elapsedTime *= 1000.0f;
    cudaMemcpy(dist, dev_dist, N * N * sizeof(int), cudaMemcpyDeviceToHost);
    printDist(dist);// printout again the new array with shortest paths
    printf("number of vertices : %d \n", N);
    printf("total time (ms) : %f \n", elapsedTime);
    cudaEventDestroy(start);
    cudaEventDestroy(stop);
    cudaFree(dev_dist);
    free(dist);
    return 0;
    }


!sudo apt-get install -y software-properties-common
!sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
!sudo apt-get update
!sudo apt-get install -y gcc-7 g++-7
!sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7
!sudo update-alternatives --config gcc

!apt-get install gcc-7 g++-7

!export CC=/usr/bin/gcc-7 && export CXX=/usr/bin/g++-7
