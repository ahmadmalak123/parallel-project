from mpi4py import MPI
import numpy as np

# Initialize MPI
comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()

# Generate random adjacency matrix
n = 1000  # matrix size
if rank == 0:
    A = np.random.randint(1, 100, size=(n, n))
else:
    A = None

# Scatter rows of adjacency matrix
local_n = n // size
local_A = np.zeros((local_n, n), dtype=int)
comm.Scatter(A, local_A, root=0)

# Initialize matrix of shortest paths
D = np.copy(local_A)

# Compute shortest paths
for k in range(n):
    # Broadcast the k-th row of D to all processes
    k_row = np.zeros((1, n), dtype=int)
    if rank == (k // local_n):
        k_row = np.copy(D[k % local_n])
    comm.Bcast(k_row, root=(k // local_n))

    # Compute shortest paths for subset of rows
    for i in range(local_n):
        for j in range(n):
            D[i][j] = min(D[i][j], D[i][k] + k_row[j])

    # Combine rows of D
    comm.Allgather(local_A, D)

# Gather rows of D
if rank == 0:
    D = np.zeros((n, n), dtype=int)
comm.Gather(local_A, D, root=0)

if rank == 0:
    print(D)



-------------------

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define INF 1000000000

void floyd_warshall(int **dist, int n) {
    int i, j, k;
    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }
}

int main(int argc, char *argv[]) {
    int n = atoi(argv[1]);
    int **dist = (int **) malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        dist[i] = (int *) malloc(n * sizeof(int));
    }

    // Fill the matrix with random numbers
    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) {
                dist[i][j] = 0;
            } else {
                dist[i][j] = (rand() % 10) + 1;
                if (dist[i][j] > INF) {
                    dist[i][j] = INF;
                }
            }
        }
    }

    // Time measurement
    clock_t start = clock();
    floyd_warshall(dist, n);
    clock_t end = clock();
    double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("Time taken: %f seconds\n", cpu_time_used);

    // Free memory
    for (int i = 0; i < n; i++) {
        free(dist[i]);
    }
    free(dist);

    return 0;
}
